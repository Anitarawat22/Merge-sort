MERGE SORT 

merge sort  is similar to the quick sort and is based on the divide and conquer to sort the elements. first divide the array into the two halves and after sorting the array, merge it. this is called merge sort.

suppose the  array is given  |4|3|5|12|2|0|1|


void merge sort(int *arr,int s,int e){
int mid = (s+e)/2;

int len1 = mid-s+1;
int len2 = e-mid;

//assume to create arrays  for len1,len2

int *left = new int[len1];
int *right = new int[len2];

//copy values

int k = s;
for(int i = 0; i<len1; i++){
    left[i] = arr[k];
    k++;
 }
 
 k = mid+1;
 for(int i = 0; i<len2; i++){
 right[i] = arr[k];
 k++;
 }
 
 //merge logic
 
 int leftIndex = 0;
 int rightIndex = 0;
 int mainArrayIndex  = s;
 
 while(leftIndex<len1 && rightIndex <len2){
    if(left[leftIndex]<right[rightIndex]){
    arr[mainArrayIndex++] = left[leftarrayindex++];
   }
   
   else{
   arr[mainArrayIndex++] = right[rightIndex++];
     }
 }
 
 //copy logic for leftarray
   while(leftIndex <len1){
         arr[mainArrayIndex++] = left[leftarrayindex++];
    }
    
  //copy logic for right array
    while(rightIndex <len2){
       arr[mainArrayIndex++] = right[rightIndex++];
  }
  
  
void merge sort(int *arr,int s,int e){
//base case
//s = e    single element
//s > e    invalid element


if(s>=e)
  return;
  
int mid = (s+e)/2
//left part sort kardo
mergesort(arr,s,mid);

//right part
mergesort(arr,mid+1,e);

now merge 2 sorted arrays
mergesort(arr,s,e);
}
int main(){

int arr[] = {4,2,8,1,7,9,5,2};
int n = 8;

int s = 0;
int e = n-1;
merge sort(arr,s,e);

for(int i = 0; i<n; i++){
   cout<<arr[i]<<" ";
 }
  cout<<endl;
  return 0;
  
}
